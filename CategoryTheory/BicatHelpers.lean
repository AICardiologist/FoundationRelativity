/-
  A minimal "helper" module that wraps the common tricks we keep writing by hand
  when working with Lean's bicategory API.  Everything here is *pure utility*:
  no project‚Äëspecific names appear, so the file can be upstreamed later.
-/
import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Bicategory.Basic

namespace CategoryTheory

open Bicategory

/-- A convenient record for an *invertible 2‚Äëcell*.
    Lean's bundled `IsIso` works but is verbose; most of our proofs only need
    the data ‚Äì not the proofs ‚Äì so we re‚Äëexport the essential fields. -/
structure Inv‚ÇÇ {C : Type*} [Bicategory C]
  {A B : C} (f g : A ‚ü∂ B) where
  Œ±  : f ‚ü∂ g
  inv : g ‚ü∂ f
  left  : Œ± ‚â´ inv = ùüô f := by aesop_cat
  right : inv ‚â´ Œ± = ùüô g := by aesop_cat

attribute [simp] Inv‚ÇÇ.left Inv‚ÇÇ.right

/--  Any `IsIso` gives an `Inv‚ÇÇ`.  Handy when importing mathlib lemmas. -/
noncomputable def IsIso.toInv‚ÇÇ {C : Type*} [Bicategory C]
    {A B : C} {f g : A ‚ü∂ B} (Œ± : f ‚ü∂ g) [IsIso Œ±] : Inv‚ÇÇ f g :=
‚ü®Œ±, inv Œ±, by simp, by simp‚ü©

/--  Vertical composition of invertible 2‚Äëcells is invertible. -/
def Inv‚ÇÇ.vcomp {C : Type*} [Bicategory C] {A B : C} {f g h : A ‚ü∂ B}
    (Œ± : Inv‚ÇÇ f g) (Œ≤ : Inv‚ÇÇ g h) : Inv‚ÇÇ f h where
  Œ± := Œ±.Œ± ‚â´ Œ≤.Œ±
  inv := Œ≤.inv ‚â´ Œ±.inv
  left := by
    rw [Category.assoc, ‚Üê Category.assoc Œ≤.Œ±, Œ≤.left, Category.id_comp, Œ±.left]
  right := by
    rw [Category.assoc, ‚Üê Category.assoc Œ±.inv, Œ±.right, Category.id_comp, Œ≤.right]

end CategoryTheory