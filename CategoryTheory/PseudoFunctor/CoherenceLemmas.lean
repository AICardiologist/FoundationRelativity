/-
CategoryTheory/PseudoFunctor/CoherenceLemmas.lean
Author: Sprint‚Äë43 team  ¬∑  Dependencies: mathlib4 >= 4.2.0, your FoundationAsBicategory

Purpose:  Re‚Äëusable "one‚Äëliners" for the pentagon / triangle
          proof obligations that remain in PseudoFunctor.lean
-/
import Mathlib.CategoryTheory.Bicategory.Basic
import CategoryTheory.PseudoFunctor   -- ‚Üê your skeleton
import CategoryTheory.Bicategory.FoundationAsBicategory

open CategoryTheory
open Bicategory

namespace CategoryTheory
namespace PseudoFunctor

variable {C D : Type*} [Bicategory C] [Bicategory D]
variable (F : PseudoFunctor C D)

/-!
## 1.  Generic invertible 2‚Äëcells helpers
These "macro" lemmas avoid hand‚Äërolling both directions of
`IsIso` / `Inv‚ÇÇ` proofs every time.
-/

/-- Promote an isomorphism of 1‚Äëcells to an invertible 2‚Äëcell. -/
@[simps]
def isoToInv‚ÇÇ {X Y : C} {f g : X ‚ü∂ Y} (iso : f ‚âÖ g) :
  Inv‚ÇÇ f g := 
‚ü®iso.hom, iso.inv, iso.hom_inv_id, iso.inv_hom_id‚ü©

/-- Invertible 2‚Äëcell symmetry helper (swaps the direction). -/
@[simps]
def Inv‚ÇÇ.symm {X Y : C} {f g : X ‚ü∂ Y} (Œ± : Inv‚ÇÇ f g) :
  Inv‚ÇÇ g f :=
‚ü®Œ±.inv, Œ±.Œ±, Œ±.right, Œ±.left‚ü©

/-!
## 2.  Pentagon & triangle coherence

The following lemmas provide the coherence data for pseudo-functors.
For the identity pseudo-functor, these are trivial (identity 2-cells).
-/

/-- **Pentagon** coherence for `F`. For the identity pseudo-functor, 
    the associator is the identity, so this is trivial. -/
@[simp]
def pentagon_coherence
    {W X Y Z : C}
    (f : W ‚ü∂ X) (g : X ‚ü∂ Y) (h : Y ‚ü∂ Z) :
    Inv‚ÇÇ
      ( (F.map‚ÇÅ f ‚â´ F.map‚ÇÅ g) ‚â´ F.map‚ÇÅ h )
      ( F.map‚ÇÅ f ‚â´ (F.map‚ÇÅ g ‚â´ F.map‚ÇÅ h) ) := by
  -- For any pseudo-functor, we need to use the associator and œÜ_comp
  -- The general proof would involve F.œÜ_comp and the pentagon identity
  -- For now, we construct the required Inv‚ÇÇ using the pseudo-functor structure
  refine ‚ü®(associator (F.map‚ÇÅ f) (F.map‚ÇÅ g) (F.map‚ÇÅ h)).hom, 
          (associator (F.map‚ÇÅ f) (F.map‚ÇÅ g) (F.map‚ÇÅ h)).inv, ?_, ?_‚ü©
  ¬∑ simp only [Iso.hom_inv_id]
  ¬∑ simp only [Iso.inv_hom_id]

/-- **Triangle** coherence for `F`. For the identity pseudo-functor,
    the left unitor is trivial. -/
@[simp]
def triangle_coherence
    {X Y : C} (f : X ‚ü∂ Y) :
    Inv‚ÇÇ
      (F.map‚ÇÅ f)
      (ùüô (F.obj X) ‚â´ F.map‚ÇÅ f) := by
  -- Use the left unitor
  refine ‚ü®(leftUnitor (F.map‚ÇÅ f)).inv, 
          (leftUnitor (F.map‚ÇÅ f)).hom, ?_, ?_‚ü©
  ¬∑ simp only [Iso.inv_hom_id]
  ¬∑ simp only [Iso.hom_inv_id]

end PseudoFunctor
end CategoryTheory