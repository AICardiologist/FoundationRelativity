/-
CategoryTheory/PseudoFunctor/CoherenceLemmas.lean
Author: Sprint‚Äë43 team  ¬∑  Dependencies: mathlib4 >= 4.2.0, your FoundationAsBicategory

Purpose:  Re‚Äëusable "one‚Äëliners" for the pentagon / triangle
          proof obligations that remain in PseudoFunctor.lean
-/
import Mathlib.CategoryTheory.Bicategory.Basic
import CategoryTheory.PseudoFunctor   -- ‚Üê your skeleton
import CategoryTheory.Bicategory.FoundationAsBicategory

open CategoryTheory
open Bicategory (whiskerLeft whiskerRight)

namespace CategoryTheory
namespace PseudoFunctor

variable {C D : Type*} [Bicategory C] [Bicategory D]
variable (F : PseudoFunctor C D)

/-!
## 1.  Generic invertible 2‚Äëcells helpers
These "macro" lemmas avoid hand‚Äërolling both directions of
`IsIso` / `Inv‚ÇÇ` proofs every time.
-/

/-- Promote an isomorphism of 1‚Äëcells to an invertible 2‚Äëcell. -/
@[simps]
def isoToInv‚ÇÇ {X Y : C} {f g : X ‚ü∂ Y} (iso : f ‚âÖ g) :
  Inv‚ÇÇ f g := 
‚ü®iso.hom, iso.inv, iso.hom_inv_id, iso.inv_hom_id‚ü©

/-- Invertible 2‚Äëcell symmetry helper (swaps the direction). -/
@[simps]
def Inv‚ÇÇ.symm {X Y : C} {f g : X ‚ü∂ Y} (Œ± : Inv‚ÇÇ f g) :
  Inv‚ÇÇ g f :=
‚ü®Œ±.inv, Œ±.Œ±, Œ±.right, Œ±.left‚ü©

/-!
## 2.  Pentagon & triangle shells

The following two lemmas are **exactly** what the two remaining
`sorry`s expect.  The bodies are deliberately left blank so Math‚ÄëAI
can insert the real argument; SWE‚ÄëAI can already commit the statement
to guarantee type‚Äëchecking of downstream code.
-/

/-- **Pentagon** coherence for `F`.  Replace `sorry` with the usual
    `calc` chain (`simp`, `whiskerLeft`, `associator_naturality`, ‚Ä¶). -/
@[simp]
def pentagon_coherence
    {W X Y Z : C}
    (f : W ‚ü∂ X) (g : X ‚ü∂ Y) (h : Y ‚ü∂ Z) :
    Inv‚ÇÇ
      ( (F.map‚ÇÅ f ‚â´ F.map‚ÇÅ g) ‚â´ F.map‚ÇÅ h )
      ( F.map‚ÇÅ f ‚â´ (F.map‚ÇÅ g ‚â´ F.map‚ÇÅ h) ) := by
  sorry   -- ‚Üê to be filled by Math‚ÄëAI on Day 4

/-- **Triangle** coherence for `F`.  Same comment as above. -/
@[simp]
def triangle_coherence
    {X Y : C} (f : X ‚ü∂ Y) :
    Inv‚ÇÇ
      (F.map‚ÇÅ f)
      (ùüô (F.obj X) ‚â´ F.map‚ÇÅ f) := by
  sorry

end PseudoFunctor
end CategoryTheory