name: CI

on: [push, pull_request]

env:
  LEAN_ABORT_ON_SORRY: 1
  BUILD_TIMEOUT_SECONDS: 90

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Lean
        uses: leanprover/lean-action@v1
        with:
          use-mathlib-cache: true
          build-args: "-K 400000"

      - name: Cache .lake
        uses: actions/cache@v3
        with:
          path: |
            ~/.lake
            .lake/build
          key: ${{ runner.os }}-lake-${{ hashFiles('lakefile.lean') }}

      - name: Build
        timeout-minutes: 2  # Fail if build takes longer than $BUILD_TIMEOUT_SECONDS
        run: |
          echo "Starting build with timeout of $BUILD_TIMEOUT_SECONDS seconds..."
          time lake build
          echo "Build completed successfully"

      - name: Verify no 'sorry'
        run: |
          if [ -f scripts/verify-no-sorry.sh ]; then
            bash scripts/verify-no-sorry.sh
          else
            echo "Warning: verify-no-sorry.sh not found"
          fi

      - name: Verify core mathematical proofs
        run: |
          # Verify key theorems compile and type-check correctly
          echo "Verifying Foundation-Relativity core theorems..."
          
          # Test Gap₂ requires WLPO (ρ=1)
          echo 'import Gap2.Proofs
          #check Gap.Proofs.Gap_requires_WLPO' | lake env lean --stdin
          
          # Test AP_Fail₂ requires WLPO (ρ=1)  
          echo 'import APFunctor.Proofs
          #check APFail.Proofs.AP_requires_WLPO' | lake env lean --stdin
          
          # Test RNP_Fail₂ requires DC_ω (ρ=2)
          echo 'import RNPFunctor.Proofs
          #check RNPFunctor.RNP_requires_DCω' | lake env lean --stdin
          
          # Test RNP₃ requires DC_{ω+1} (ρ=2+)
          echo 'import RNPFunctor.Proofs3
          #check RNPFunctor.RNP_requires_DCω_plus' | lake env lean --stdin
          
          # Test SpectralGap requires AC_ω (ρ=3) - Milestone C
          echo 'import SpectralGap.Proofs
          #check SpectralGap.SpectralGap_requires_ACω' | lake env lean --stdin
          
          echo "✅ All Foundation-Relativity theorems verified!"
          
      - name: Run test executables
        run: |
          echo "Running comprehensive test suite..."
          
          # Core functionality tests
          lake exe testFunctors
          lake exe testNonIdMorphisms
          lake exe AllPathologiesTests
          
          # Mathematical proof verification tests
          lake exe Gap2ProofTests
          lake exe APProofTests
          lake exe RNPProofTests
          lake exe RNP3ProofTests
          lake exe SpectralGapProofTests
          lake exe GodelGapProofTests
          
          # Paper smoke tests (Sprint 42)
          lake exe PaperP1Tests
          lake exe PaperP2Tests
          lake exe PaperP3Tests
          
          echo "✅ All test executables completed successfully!"
  
  # Sprint 43 P2: CI Tightening with strict warnings/axiom gates
  ci-strict:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Lean
        uses: leanprover/lean-action@v1
        with:
          use-mathlib-cache: true
          build-args: "-K 400000"

      - name: Cache .lake
        uses: actions/cache@v3
        with:
          path: |
            ~/.lake
            .lake/build
          key: ${{ runner.os }}-lake-strict-${{ hashFiles('lakefile.lean') }}

      - name: Build with strict warnings
        run: |
          echo "Building with strict linter flags..."
          # Enable strict warnings for new modules (Papers/, CategoryTheory/)
          lake build 2>&1 | tee build.log
          
          # Check for warnings in new modules only (allow legacy warnings)
          if grep -E "warning.*\/(Papers|CategoryTheory)\/" build.log | grep -v "declaration uses 'sorry'"; then
            echo "❌ Warnings found in new modules - CI strict mode requires warning-free code"
            exit 1
          fi
          echo "✅ New modules are warning-free"

      - name: Verify sorry allowlist
        run: |
          echo "Checking for unauthorized sorry statements..."
          # Allow sorries only in specific files during development
          SORRY_FILES=$(find Papers/ CategoryTheory/ -name "*.lean" -exec grep -l "sorry" {} \; 2>/dev/null | grep -v "PseudoFunctor.lean" || true)
          if [ -n "$SORRY_FILES" ]; then
            echo "❌ Found unauthorized sorry statements in:"
            echo "$SORRY_FILES"
            exit 1
          fi
          echo "✅ No unauthorized sorry statements found"

      - name: Documentation coverage check
        run: |
          echo "Checking documentation coverage..."
          UNDOC_COUNT=0
          
          for file in Papers/*.lean CategoryTheory/*.lean; do
            if [ -f "$file" ] && ! head -20 "$file" | grep -q "/-!"; then
              echo "Warning: $file missing module documentation"
              UNDOC_COUNT=$((UNDOC_COUNT + 1))
            fi
          done
          
          if [ "$UNDOC_COUNT" -gt 2 ]; then
            echo "❌ Too many undocumented modules: $UNDOC_COUNT"
            exit 1
          fi
          
          echo "✅ Documentation coverage acceptable ($UNDOC_COUNT undocumented files)"