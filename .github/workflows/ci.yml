name: CI (Full)

# Run full CI only on main branch pushes
# PRs use ci-optimized.yml with path filtering
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  LEAN_ABORT_ON_SORRY: 1
  BUILD_TIMEOUT_SECONDS: 90

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Lean
        uses: leanprover/lean-action@v1
        with:
          use-mathlib-cache: true
          build-args: "-K 400000"

      - name: Cache .lake
        uses: actions/cache@v3
        with:
          path: |
            ~/.lake
            .lake/build
          key: ${{ runner.os }}-lake-${{ hashFiles('lakefile.lean') }}

      - name: Build
        timeout-minutes: 2  # Fail if build takes longer than $BUILD_TIMEOUT_SECONDS
        run: |
          echo "Starting build with timeout of $BUILD_TIMEOUT_SECONDS seconds..."
          time lake build
          echo "Build completed successfully"

      - name: Verify no 'sorry'
        run: |
          if [ -f scripts/verify-no-sorry.sh ]; then
            bash scripts/verify-no-sorry.sh
          else
            echo "Warning: verify-no-sorry.sh not found"
          fi

      - name: Guard against placeholder code
        run: |
          echo "Checking for prohibited placeholder implementations..."
          
          # Check for unsafe placeholder code patterns (not documentation)
          VIOLATIONS=0
          
          # Look for actual unsafe implementations
          if find . -path "./.lake" -prune -o -name "*.lean" -exec grep -l "unsafe" {} \; | head -1 | grep -q .; then
            echo "❌ Found 'unsafe' implementations in:"
            find . -path "./.lake" -prune -o -name "*.lean" -exec grep -Hn "unsafe" {} \;
            VIOLATIONS=$((VIOLATIONS + 1))
          fi
          
          # Look for TEMP implementations (not comments)
          if find . -path "./.lake" -prune -o -name "*.lean" -exec grep -E "^[[:space:]]*def.*TEMP|^[[:space:]]*theorem.*TEMP" {} \; | head -1 | grep -q .; then
            echo "❌ Found 'TEMP' definitions in:"
            find . -path "./.lake" -prune -o -name "*.lean" -exec grep -HnE "^[[:space:]]*def.*TEMP|^[[:space:]]*theorem.*TEMP" {} \;
            VIOLATIONS=$((VIOLATIONS + 1))
          fi
          
          # Look for placeholder stub definitions (not documentation)
          if find . -path "./.lake" -prune -o -name "*.lean" -exec grep -E "def.*placeholder.*:=|theorem.*placeholder.*:=" {} \; | head -1 | grep -q .; then
            echo "❌ Found placeholder stub definitions in:"
            find . -path "./.lake" -prune -o -name "*.lean" -exec grep -HnE "def.*placeholder.*:=|theorem.*placeholder.*:=" {} \;
            VIOLATIONS=$((VIOLATIONS + 1))
          fi
          
          if [ "$VIOLATIONS" -gt 0 ]; then
            echo "❌ CI Guard: Found $VIOLATIONS prohibited placeholder implementations"
            echo "All placeholder/unsafe code must be on feature branches, not main"
            exit 1
          fi
          
          echo "✅ No prohibited placeholder implementations found"

      - name: Check for cheap proofs
        run: |
          lake build cheap_proofs
          lake exe cheap_proofs

      - name: Check for stub structures
        run: |
          python scripts/check_struct_stubs.py

      - name: Check LaTeX-Lean alignment
        run: |
          python scripts/check_alignment.py

      - name: Verify core mathematical proofs
        run: |
          # Verify key theorems compile and type-check correctly
          echo "Verifying Foundation-Relativity core theorems..."
          
          # Test Gap₂ requires WLPO (ρ=1)
          echo 'import Gap2.Proofs
          #check Gap.Proofs.Gap_requires_WLPO' | lake env lean --stdin
          
          # Test AP_Fail₂ requires WLPO (ρ=1)  
          echo 'import APFunctor.Proofs
          #check APFail.Proofs.AP_requires_WLPO' | lake env lean --stdin
          
          # Test RNP_Fail₂ requires DC_ω (ρ=2)
          echo 'import RNPFunctor.Proofs
          #check RNPFunctor.RNP_requires_DCω' | lake env lean --stdin
          
          # Test RNP₃ requires DC_{ω+1} (ρ=2+)
          echo 'import RNPFunctor.Proofs3
          #check RNPFunctor.RNP_requires_DCω_plus' | lake env lean --stdin
          
          # Test SpectralGap requires AC_ω (ρ=3) - Milestone C
          echo 'import AnalyticPathologies.Proofs
          #check AnalyticPathologies.SpectralGap_requires_ACω' | lake env lean --stdin
          
          echo "✅ All Foundation-Relativity theorems verified!"
          
      - name: Run test executables
        run: |
          echo "Running comprehensive test suite..."
          
          # Core functionality tests
          lake exe testFunctors
          lake exe testNonIdMorphisms
          lake exe AllPathologiesTests
          
          # Mathematical proof verification tests
          lake exe Gap2ProofTests
          lake exe APProofTests
          lake exe RNPProofTests
          lake exe RNP3ProofTests
          lake exe SpectralGapProofTests
          lake exe GodelGapProofTests
          
          # Paper smoke tests (Sprint 42)
          lake exe PaperP1Tests
          lake exe PaperP2Tests
          lake exe PaperP3Tests
          
          echo "✅ All test executables completed successfully!"
  
  # Sprint 43 P2: CI Tightening with strict warnings/axiom gates
  ci-strict:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Lean
        uses: leanprover/lean-action@v1
        with:
          use-mathlib-cache: true
          build-args: "-K 400000"

      - name: Cache .lake
        uses: actions/cache@v3
        with:
          path: |
            ~/.lake
            .lake/build
          key: ${{ runner.os }}-lake-strict-${{ hashFiles('lakefile.lean') }}

      - name: Build with strict warnings
        run: |
          echo "Building with strict linter flags..."
          # Enable strict warnings for new modules (Papers/, CategoryTheory/)
          lake build 2>&1 | tee build.log
          
          # Check for warnings in new modules only (allow legacy warnings)
          if grep -E "warning.*\/(Papers|CategoryTheory)\/" build.log | grep -v "declaration uses 'sorry'"; then
            echo "❌ Warnings found in new modules - CI strict mode requires warning-free code"
            exit 1
          fi
          echo "✅ New modules are warning-free"

      - name: Documentation coverage check
        id: doc_coverage
        run: |
          echo "Checking documentation coverage..."
          ./scripts/doc_coverage.sh coverage.txt || true
          COVERAGE=$(cat coverage.txt || echo "0")
          echo "Documentation coverage: ${COVERAGE}%"
          echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
          
          # Don't fail CI for low coverage, just report
          if (( COVERAGE < 50 )); then
            echo "::warning::Documentation coverage (${COVERAGE}%) is below recommended threshold (50%)"
          fi

      - name: Automation metrics
        id: automation
        run: |
          echo "Calculating automation metrics..."
          ./scripts/leanink_stats.sh automation_stats.json || true
          
          # Extract key metrics
          if [ -f automation_stats.json ]; then
            AUTOMATION_RATE=$(jq -r '.summary.automation_percentage' automation_stats.json)
            SORRY_COUNT=$(jq -r '.summary.sorry_count' automation_stats.json)
            echo "Automation rate: ${AUTOMATION_RATE}%"
            echo "Sorry count: ${SORRY_COUNT}"
            echo "automation_rate=${AUTOMATION_RATE}" >> $GITHUB_OUTPUT
            echo "sorry_count=${SORRY_COUNT}" >> $GITHUB_OUTPUT
          fi

      - name: Upload metrics artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lean-metrics
          path: |
            coverage.txt
            automation_stats.json
          retention-days: 30

      - name: Verify sorry allowlist
        run: |
          echo "Checking for unauthorized sorry statements..."
          if [ -f scripts/check-sorry-allowlist.sh ]; then
            bash scripts/check-sorry-allowlist.sh
          else
            # Fallback: check for sorry in new modules only
            SORRY_COUNT=$(find Papers/ CategoryTheory/ -name "*.lean" -exec grep -l "sorry" {} \; 2>/dev/null | wc -l)
            if [ "$SORRY_COUNT" -gt 0 ]; then
              echo "❌ Found sorry statements in new modules:"
              find Papers/ CategoryTheory/ -name "*.lean" -exec grep -Hn "sorry" {} \; 2>/dev/null || true
              exit 1
            fi
          fi
          echo "✅ No unauthorized sorry statements found"

      - name: Verify axiom allowlist
        run: |
          echo "Checking for unauthorized axioms..."
          if [ -f scripts/check-no-axioms.sh ]; then
            bash scripts/check-no-axioms.sh
          else
            # Fallback: Use lake to check axioms in core modules
            lake env lean --run scripts/check-no-axioms.lean | tee axiom_check.log
            if grep -q "AXIOM" axiom_check.log; then
              echo "❌ Found unauthorized axioms - see axiom_check.log"
              cat axiom_check.log
              exit 1
            fi
          fi
          echo "✅ No unauthorized axioms found"
      - name: Documentation coverage check
        run: |
          echo "Checking documentation coverage..."
          UNDOC_COUNT=0
          
          for file in Papers/*.lean CategoryTheory/*.lean; do
            if [ -f "$file" ] && ! head -20 "$file" | grep -q "/-!"; then
              echo "Warning: $file missing module documentation"
              UNDOC_COUNT=$((UNDOC_COUNT + 1))
            fi
          done
          
          if [ "$UNDOC_COUNT" -gt 2 ]; then
            echo "❌ Too many undocumented modules: $UNDOC_COUNT"
            exit 1
          fi
          
          echo "✅ Documentation coverage acceptable ($UNDOC_COUNT undocumented files)"